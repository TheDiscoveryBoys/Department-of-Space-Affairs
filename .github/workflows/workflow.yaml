name: "Deployment pipeline"

on:
  push:
    branches:
      - main
      - development
      - pipeline-setup
      - pipeline-adjust-linux

jobs:
  terraform:
    permissions:
      id-token: write
      contents: read
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::179530787873:role/gh-actions-role #We did our research and the account ID is NOT considered secret, sensitive, or confidential information.
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=spaceaffairsterraform" -backend-config="key=terraformstate/terraform.tfstate" -backend-config="region=af-south-1"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "ec2host=$(terraform output -raw ec2_host)" >> $GITHUB_OUTPUT
          
  # release-front-end:
  #   name: Build & Release Front-End
  #   runs-on: windows-latest
  #   needs: 
  #     - terraform
  #     - release-api
  #   env: 
  #     PROJECT_PATH: DOSA-Client.csproj
  #   defaults:
  #     run:
  #       working-directory: DOSA-Client
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
      
  #     - name: Install Dotnet
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: '9.0.x'

  #     - name: Restore packages
  #       run: dotnet restore ${{ env.PROJECT_PATH }} -p:SelfContained=true
      
  #     - name: Build Application
  #       run: dotnet build ${{ env.PROJECT_PATH }} -c Release --self-contained --no-restore

  #     - name: Publish Application
  #       run: dotnet publish ${{ env.PROJECT_PATH }} -c Release --self-contained -r win-x64 -p:PublishSingleFile=true --no-build

  #     - name: Get Version
  #       run: |
  #           $version = Get-Date -Format "yyyy.MM.dd-HH.mm.ss"
  #           echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
  #       shell: pwsh

  #     - name: Create Front-End Release
  #       uses: softprops/action-gh-release@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: v${{ env.VERSION }}
  #         name: "Release v${{ env.VERSION }}"
  #         body: "Automated release for commit ${{ github.sha }}"
  #         draft: false
  #         prerelease: false
  #         files: DOSA-Client/bin/Release/net9.0-windows/win-x64/publish/*.exe

  # install-docker-ec2:
  #   runs-on: ubuntu-latest
  #   steps: 

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: arn:aws:iam::${{ secrets.IAM_USER_ID }}:role/gh-actions-role
  #       aws-region: af-south-1
    
  #   - name: Get secrets from AWS Key Store
  #     uses: aws-actions/aws-secretsmanager-get-secrets@v2
  #     with:
  #       secret-ids: |
  #             EC2_PRIV_KEY, ec2privatekey
  #             GOOGLE_CLIENT_SECRET, googleclientsecret

  #     - name: Write private key
  #       run: |
  #         echo "${{ env.EC2_PRIV_KEY }}" > spaceaffairs-key.pem
  #         chmod 600 spaceaffairs-key.pem

  #     - name: Deploy to EC2
  #       run: |
  #         EC2_HOST=${{ needs.terraform.outputs.ec2host }}

  #     - name: Update Ubuntu
  #       run:   ssh -o StrictHostKeyChecking=no -i spaceaffairs-key.pem "ubuntu@$EC2_HOST" "sudo apt update"

  #     - name: Install Docker
  #       run: apt install docker.io -y

  
  build-api:
    name: Build API
    runs-on: ubuntu-latest
    needs: 
      - terraform
    
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::179530787873:role/gh-actions-role
          aws-region: af-south-1

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            POSTGRES_USER, postgresuser
            POSTGRES_PASS, postgrespass

      - name: Generate appsettings.Production.json
        working-directory: IntergalacticPassportAPI
        run: |
          file=appsettings.Production.json
          echo "{" > $file
          echo '  "ConnectionStrings": {' >> $file
          echo "    \"DefaultConnection\": \"Host=${{ needs.terraform.outputs.dbhost }};Port=5432;Database=spaceaffairsdb;Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASS }}\"" >> $file
          echo "  }," >> $file
          echo '  "Logging": {' >> $file
          echo '    "LogLevel": {' >> $file
          echo '      "Default": "Information",' >> $file
          echo '      "Microsoft.AspNetCore": "Warning"' >> $file
          echo '    }' >> $file
          echo '  },' >> $file
          echo '  "AllowedHosts": "*"' >> $file
          echo "}" >> $file

      - name: Login to dockerhub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
      - name: Build
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/space-affairs -f IntergalacticPassportAPI/Dockerfile IntergalacticPassportAPI
          docker push ${{secrets.DOCKER_USERNAME}}/space-affairs:latest

  deploy-api:
     needs: build-api
     runs-on: ec2_api
     steps:
      - name: Prune unused images
        run: sudo docker system prune --force

      - name: Pull image from docker
        run: sudo docker pull ${{secrets.DOCKER_USERNAME}}/space-affairs:latest
      - name: Delete old container
        run: sudo docker rm -f space-affairs-api-container

      - name: Run container
        run: sudo docker run -d -p 80:8080 --name space-affairs-api-container ${{secrets.DOCKER_USERNAME}}/space-affairs:latest
        
  flyway:
    needs:
      - terraform
      - deploy-api
    permissions:
      id-token: write
      contents: read
    name: Flyway Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::179530787873:role/gh-actions-role
          aws-region: af-south-1
      
      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
                POSTGRES_USER, postgresuser
                POSTGRES_PASS, postgrespass

      - name: Run Flyway Migrations
        run: |
          docker run --rm --volume ${{ github.workspace }}/migrations:/flyway/sql:ro redgate/flyway -url="jdbc:postgresql://${{ needs.terraform.outputs.dbhost }}/spaceaffairsdb" -user="${{ env.POSTGRES_USER }}" -password="${{ env.POSTGRES_PASS }}" migrate

using System.Data;
using System.Reflection;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using Dapper;
using Npgsql;
using IntergalacticPassportAPI.Models;

namespace IntergalacticPassportAPI.Data
{
    public abstract class BaseRepository<Model>(IConfiguration config, string tableName)
    {

        private readonly string _connectionString = config.GetConnectionString("DefaultConnection");

        protected IDbConnection CreateDBConnection()
        {
            return new NpgsqlConnection(_connectionString);
        }

        public async Task<Model> GetById(object id) // Object to handle string or int ids.
        {
            string PKIdentifier = GetPrimaryKeyIdentifier(typeof(Model));
            using var db = CreateDBConnection();
            var sql = $"SELECT * FROM {tableName} WHERE {tableName}.{CamelToSnake(PKIdentifier)} = '{id}'";
            return await db.QueryFirstOrDefaultAsync<Model>(sql);

        }
        public async Task<IEnumerable<Model>> GetAll()
        {
            using var db = CreateDBConnection();
            var sql = $"SELECT * FROM {tableName}";
            return await db.QueryAsync<Model>(sql);
        }
        public async Task<Model> Create(Model model)
        {
            using var db = CreateDBConnection();
            var sql = "";
            if (typeof(Model) == typeof(Users))
            {
                sql = ModelToSQLInsert(model, true);
            }
            else 
            {
                sql = ModelToSQLInsert(model, false);
            }
                return await db.QuerySingleAsync<Model>(sql, model);
        }

        public async Task<Model> Update(Model model)
        {
            string PKIdentifier = GetPrimaryKeyIdentifier(typeof(Model));
            using var db = CreateDBConnection();
            List<string> reflectedAttributes = GetPropertyNamesFromModel(model);
            string sqlSetCode = "";

            foreach (string column in reflectedAttributes)
            {
                if (!column.Equals(PKIdentifier)) sqlSetCode += CamelToSnake(column) + " = " + "@" + column + ",";
            }

            var sql = $"UPDATE {tableName} SET {truncateComma(sqlSetCode)} WHERE {CamelToSnake(PKIdentifier)} = @{PKIdentifier} RETURNING *;";
            Console.WriteLine(sql);
            return await db.QuerySingleOrDefaultAsync<Model>(sql, model);

        }

        public async Task<bool> Delete(int id) 
        {
            string PKIdentifier = GetPrimaryKeyIdentifier(typeof(Model));
            using var db = CreateDBConnection();
            var sql = $"DELETE FROM {tableName} WHERE {CamelToSnake(PKIdentifier)} = '{id}';";
            Console.WriteLine(sql);
            var rowsAffected = await db.ExecuteAsync(sql);

            return rowsAffected > 0;
        }

        public abstract Task<bool> Exists(Model model);

        protected virtual string ModelToSQLInsert(Model model, Boolean includeId)
        {
            List<string> reflectedAttributes = GetPropertyNamesFromModel(model);
            int i = 0;
            if (!includeId)
            {
                i = 1;
            }
            string sqlCols = "";
            string sqlValues = "";
            for (; i < reflectedAttributes.Count; i++)
            {
                if (i == reflectedAttributes.Count - 1)
                {
                    sqlCols += CamelToSnake(reflectedAttrubutes.ElementAt(i));
                    sqlValues += "@" + reflectedAttrubutes.ElementAt(i);
                }
                else
                {
                    sqlCols += CamelToSnake(reflectedAttrubutes.ElementAt(i)) + ", ";
                    sqlValues += "@" + reflectedAttrubutes.ElementAt(i) + ", ";
                }
            }
            string sql = $"INSERT INTO {tableName} ({sqlCols}) VALUES ({sqlValues}) RETURNING *";
            Console.WriteLine(sql);
            return sql;
        }

        protected List<string> GetPropertyNamesFromModel(Model model)
        {
            PropertyInfo[] properties = model.GetType().GetProperties();
            List<string> modelAttributes = [];
            foreach (PropertyInfo property in properties)
            {
                string propertyName = property.Name;
                var pkAttr = property.GetCustomAttribute<PrimaryKeyAttribute>();
                if (pkAttr != null)
                {
                    if (!pkAttr.AutoGenerated) modelAttributes.Add(propertyName);
                }
                else
                {
                    modelAttributes.Add(propertyName);
                }

            }
            return modelAttributes;
        }

        private string GetPrimaryKeyIdentifier(Type model)
        {
            PropertyInfo[] properties = model.GetProperties();
            foreach (PropertyInfo property in properties)
            {
                string propertyName = property.Name;
                //var pkAttr = property.GetCustomAttribute<PrimaryKeyAttribute>();
                var pkAttr = property.GetCustomAttribute<KeyAttribute>();
                if (pkAttr != null)
                {
                    return propertyName;
                }

            }
            throw new Exception("Model doesn't contain primary key");
        }

        private string truncateEndOfSql(string sqlString)
        {
            return sqlString[..(sqlString.Count() - 2)];
        }

        private string truncateComma(string sqlString)
        {
            return sqlString[..(sqlString.Count() - 1)];
        }

        private static string CamelToSnake(string input)
        {
            if (string.IsNullOrEmpty(input))
                return input;

            // Insert underscore before each uppercase letter (except the first), then lowercase everything
            string result = Regex.Replace(input, "(?<!^)([A-Z])", "_$1").ToLower();
            return result;
        }

        private string GetTableNameFromModel(Model model)
        {
            PropertyInfo prop = model.GetType().GetProperty("tableName");
            return prop?.GetValue(model)?.ToString();
        }

    }
}
